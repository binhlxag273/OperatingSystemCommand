List directory:
	ls D:\
List directory (contain hidden file):
	ls -Force D:\
Print-working directory tell which directory you're currently in:
	pwd
Change directory:
	cd C:\Users\balebom\Documents
	cd ..\Desktop
	cd ~\Documents
Tab completion:
	Character->Tab
Make a directory:
	mkdir my_supercool_file
	mkdir 'my supercool file'
Show history command:
	history
Search command in history:
	ctrl + R -> enter character
	#mkdir -> Tab
Clear screen:
	clear
	cls
Copy file:
	cp my_supercool_file ..\
	cp *.txt ..\
    - Attention: Copy directory will not copy child of directory, in that case, use parameter -Recurse and -Verbose:
	cp my_supercool_file ..\ -Recurse -Verbose
Rename and move file:
	mv .\CommandLineInput.txt .\CLI.txt
	mv .\CLI.txt ..\CommandLineInput.txt
	mv *.txt ..\
Remove or delete file, take caution when using remove bc it doesn't use the recycle bin.
Once the files and directory are removed, they're gone for good:
	rm Hotdog.txt
    - Attention: you can't remove system file, once you wanna do this, use -Force parameter:
	rm important_file.txt -Force
    - Attention: remove a folder: 
	rm my_supercool_file -Recurse
Read file in powershell (except folder):
	cat farm_animals.txt
	more farm_animals.txt //enter:advance the file by one line; space: advance the file by one page; q: quit out of 'more' and go back to powershell.
	cat farm_animals.txt -Head 10 //show first 10 lines of the file.
	cat farm_animals.txt -Tail 10 //show last 10 lines of the file.
Open (or create) a file:
	start farm_animals.txt
	start wordpad .\farm_animals.txt
	start notepad new_file
Get alias of command:
	get-alias ls
Find string in file:
	select-string cow farm_animals.txt
	sls cow farm_animals.txt
	select-string buffalo *.txt
	sls buffalo *.txt
Search file within Directory:
	ls .\ -Recurse -Filter *.txt
Print a word on powershell:
	echo woof
print a word into text file:
	echo woof > dog.txt
Pipeline | can connect many commands:
	cat farm_animals | sls st
	cat farm_animals |sls st > st_words.txt
When you rm (remove) secure_file, the error will show in the powershell; but when you don't want to see them, you can change error's flow into a file, like:
	rm secure_file
	rm secure_file 2> errors.txt // 2 means the number of code of standard error in powershell.
	cat errors.txt
	rm secure_file 2> $null // $null means nothing, and this command will remove the error too.

User Account:
Return all user account in system:
	net-user
	Get-LocalUser
Return all group account in system:
	Get-LocalGroup
Return all member of group account:
	Get-LocalGroupMember Administrators
Add new user:
	net user andrea * /add
Force user change password first time log on:
	net user andrea /logonpasswordchg:yes
Combine 2 thing above:
	net user andrea P@ssword /add /logonpasswordchg:yes
Delete account:
	net user andrea /del
	Remove-LocalUser andrea
See permission of file or folder:
	icacls .\Desktop\
icacls help:
	icacls /?
Turn off inheritance:
	icacls .\my_supercool_folder\ /inheritancelevel:d
Grant permission for file or folder:
	icacls '.\vacation_pic\' /grant 'Everyone:(OI)(CI)(R)' //Powershell
	icacls "vacation_pic" /grant Everyone:(OI)(CI)(R) // Command promt
	icacls '.\vacation_pic\' /grant 'Authenticated Users:(OI)(CI)(R)' //people have account can see this folder
	icacls '.\vacation_pc\' /remove Everyone

Compress file or folder:
	Compress-Archive -Path .\secrect_file\ .\cool_archive.zip

Return the assigned ip:
	ipconfig /release
Add new ip address:
	ipconfig /renew
Hide folder:
	attrib +R +S +H Z:\QTM_N1_T2 /S /D
