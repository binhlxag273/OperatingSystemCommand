create new file:
  touch foo.c  // my_func(void)...
  touch foo.h   // header file
  touch main.c
edit file:
  nano foo.c
  nano foo.h
  nano main.c
shared library:
  gcc -c -Wall -Werror -fpic foo.c  
  gcc -shared -o libfoo.so foo.o
  LD_LIBRARY_PATH=/mnt/LD_LIBRARY_PATH=/mnt/c/Users/User/OneDrive/Desktop:$LD_LIBRARY_PATH
  export LD_LIBRARY_PATH=/mnt/c/Users/User/OneDrive/Desktop:$LD_LIBRARY_PATH
  gcc -Wall -o test_1 main.c -L/mnt/c/Users/User/OneDrive/Desktop -lfoo
  
shared library much easier:
  g++ -c -fpic lib_add.cpp lib_sub.cpp
  g++ -shared -o lib_cacl.so *.o
  g++ -c main.cpp -o main.o
  g++ -o main main.o -L. -l_calc
  export LD_LIBRARY_PATH=:/mnt/d/Linux
  ./main
  
shared library with hpp file
  g++ -shared -fpic json.hpp -o lib_json.so 
 # if you want to tell g++ treat json.hpp as if it really was a cpp-file, you can do so by specifying the explicit type to -x.
  g++ -shared -fpic -x c++ json.hpp -o lib_json.so
  g++ -o schema schema.o -L. -l_json
  ./schema
  
compile gcc in another folder:
  gcc -Wall -o test_1 main.c -L/mnt/c/Users/User/OneDrive/Desktop -I/mnt/c/Users/User/OneDrive/Desktop -lfoo

check if memory is leaked:
  valgrind --leak-check=yes ./main

create a folder with subfolder:
  mkdir -p out/build/

remove a folder:
  rm -rf out/

extract .tar file:
  tar -zxvf abc...tar
  
mongodb command:
##################################
Start MongoDB:
  sudo sustemctl start mongod
if fail, run following command, then start again:
  sudo systemctl daemon-reload

Verify MongoDB has started successfully:
  sudo systemctl status mongod
Optionally ensure that MongoDB will start follwing a system reboot ...:
  sudo systemctl enable mongod
stop MongoDB:
  sudo systemctl stop mongod
Restart MongoDB:
  sudo systemctl restart mongod
Begin using MongoDB:
  mongo
